<?xml version="1.0" encoding="utf-8"?>
<itemsBox:LatticeUltra xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   creationComplete="latticeultra1_creationCompleteHandler(event)"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:mx="library://ns.adobe.com/flex/mx" 
					  xmlns:itemsBox="cn.sevencool.sangocraft.web.symbols.itemsBox.*"
					  >
	<fx:Script>
		<![CDATA[
			import cn.sevencool.sangocraft.data.manager.barracks.control.BarracksManager;
			import cn.sevencool.sangocraft.data.manager.utils.ModuleManager;
			import cn.sevencool.sangocraft.data.symbols.ItemManager;
			import cn.sevencool.sangocraft.data.symbols.material.MaterialKeys;
			import cn.sevencool.sangocraft.data.symbols.material.MaterialManager;
			import cn.sevencool.sangocraft.data.vo.ItemDescription;
			import cn.sevencool.sangocraft.data.vo.ItemOperationVO;
			
			import mx.events.FlexEvent;
			
			[Embed(source="../../../../../../../assets/images/barracks/cell.png")]
			private static var backBorder: Class;
			private var _itemBit:Bitmap = null;
			private var _barrM:BarracksManager=null;
			private var _itemManager:ItemManager=null;
			private var _itemDess:ItemDescription=null;
			public override function get latticeWidth():Number
			{
				return 73 ;
			}
			
			public override function get latticeHeight():Number
			{
				return 73 ;
			}
			
			private var _backgroundVisiable:Boolean = true ;
			public function set backgroundVisiable(value:Boolean):void{
				_backgroundVisiable = value ;
			}
			protected function latticeultra1_creationCompleteHandler(event:FlexEvent):void
			{
				_itemBit = new Bitmap();
				var emptyicon:Bitmap = new backBorder() as Bitmap ;
				if(emptyicon != null)
				{
					background.addChildAt(new Bitmap(emptyicon.bitmapData),0) ;
				}
				else
				{
					background.graphics.beginFill(0x00ff00) ;
					background.graphics.drawRect(0 , 0 , latticeWidth , latticeHeight) ;
					background.graphics.endFill() ;
				}
				background.visible = _backgroundVisiable ;
			}
			
			
			/**
			 * 将领显示
			 * */
			protected override function elementDisplay():void{
				super.elementDisplay() ;
				if(item == null)
				{
					return ;
				}
				_barrM=ModuleManager.getInstance().getInstanceBy(BarracksManager);
				_itemManager=ItemManager.getInstance();
				_itemDess=_itemManager.ItemInfo[item.item.dwBaseID];
				numValue.visible = false ;
				figure.visible=false;
				var num:int=0;
				if(_barrM.refreshType==2){
					num=item.armsValue;
				}else if(_barrM.refreshType==3){
					num=item.attackValue;
				}else if(_barrM.refreshType==4){
					num=item.defendValue;
				}
				if(_barrM.refreshType!=1){
					numValue.figureHandler(num.toString(),MaterialKeys.BARRCKSATTRIBUTE,8,-1);
					numValue.x=30;
				}
				if(item.item.General)
				{
					if(item.item.General.nLevel==_itemDess.nMaxlevel)
					{
						setVisi(3);
					}
					if(item.item.General.nLevel!=_itemDess.nMaxlevel)
					{
						figure.figureHandler(item.item.General.nLevel.toString(),MaterialKeys.LVLSMALL,8);
						setVisi(4);
					}
				}
				genAbled();
			}
			
			
			/**
			 * 将领的可用状态判断
			 * */
			private function genAbled():void
			{
				if(item.isGray)
				{
					setState(4);
				} 
				else
				{
					setState(5);
				}
				if(item.selectStrengthen||item.selectSell)
				{
					setState(1);
				} 
				else if(!item.isGray)
				{
					setState(5);
				}
				if(item.removeBtn)
				{
					removeBit.visible=true;
					genType.visible =false;
				} 
				else
				{
					removeBit.visible=false;
				}
				if(item.item.dwBaseID)
				{
					while(bit_item.numChildren != 0 )
					{
						bit_item.removeChildAt(0);
					}
					bit_item.addChild(MaterialManager.getInstance().getIcon(MaterialKeys.BIG_HEAD,_itemDess.nHeadId.toString(),_itemBit));
					genType.solderType =item.itemType;
					genType.visible =true;
				} 
			}
			
			public function get item():ItemOperationVO
			{
				return _element as ItemOperationVO ;
			}
			
			
			/**
			 * 设置物品状态
			 * */
			private function setState(keyValue:int):void
			{
				for(var i:int=1;i<5;i++)
				{
					if(keyValue==i)
					{
						this['state'+i].visible=true;
					} 
					if(keyValue==5) {
						this['state'+i].visible=false;
					}
				}
			}
			
			
			/**
			 * state 1 使用中
			 * state 2 统率力不足
			 * state 3 最大等级
			 * state 4 正常等级
			 * state 5 数字
			 * */
			private function setVisi(keyIndex:int):void
			{
				figure.visible = Boolean(keyIndex==4) ;
				numValue.visible = Boolean(keyIndex==5) ;
				for(var i:int=1;i<5;i++)
				{
					this['stateIndex'+i].visible=Boolean(i==keyIndex);
				}
			}
			
			
			/**
			 * 等级显示
			 * */
			private function showLvl():void
			{
				if(item.item.General&&item.item.General.nLevel==_itemDess.nMaxlevel)
				{
					setVisi(3);
				}
				if(item.item.General&&item.item.General.nLevel!=_itemDess.nMaxlevel)
				{
					setVisi(4);
				}
			}
			
			
			/**
			 * 显示物品状态
			 * */	
			public override function set itemShowState(value:String):void{
				if(value=='SHOWLVL'&&item.item.dwBaseID>0)
				{
					showLvl();
					return;
				}
				if(value=='SHOWWORD')
				{
					if(item.selectFormations==1)
					{
						setVisi(2);
						return;
					}
					if((item.item.General&&item.item.General.nLocationIndex==1)||item.selectFormations==2)
					{
						setVisi(1);
						return;
					}
					if(item.selectFormations!=1&&item.selectFormations!=2)
					{
						showLvl();
					}
				}
				if(value=='SHOWNUM'&&_barrM.refreshType!=1)
				{
					setVisi(5);
				}
				
			}
			
			
			public override function set state(value:String):void
			{
				super.state = value ;
				switch(state){
					case STATE_NORMAL :
						setState(5);
						break ;
					case STATE_SELECT :
						setState(1);
						break ;
					case STATE_OVER :
						setState(3);
						break ;
					case SHORTAGE :
						setState(2);
						break ;
					case DISABLED :
						setState(4);
						break ;
					default:
						throw new Error("state" + state);
				}
			}
			
			
		]]>
	</fx:Script>
	<itemsBox:layout>
		<s:BasicLayout/>
	</itemsBox:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
		
</itemsBox:LatticeUltra>
