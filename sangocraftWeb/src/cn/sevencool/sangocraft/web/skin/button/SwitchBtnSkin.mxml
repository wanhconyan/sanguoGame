<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark Button component.  

       @see spark.components.Button
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
             xmlns:s="library://ns.adobe.com/flex/spark" 
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
             minWidth="21" minHeight="21" 
			 creationComplete="sparkbuttonskin1_creationCompleteHandler(event)"
             alpha.disabled="0.5">
     
    <fx:Metadata>
        <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.Button")]
        ]]>
    </fx:Metadata>
    
    <fx:Script fb:purpose="styling">
        <![CDATA[         
			import mx.events.FlexEvent;
			
			import spark.components.Group;
			import spark.filters.GlowFilter;
            /* Define the skin elements that should not be colorized. 
            For button, the graphics are colorized but the label is not. */
            static private const exclusions:Array = ["labelDisplay"];
            
            /** 
             * @private
             */     
            override public function get colorizeExclusions():Array {return exclusions;}
            
            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                useChromeColor = true;
                super.initializationComplete();
            }  
            
            /**
             *  @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
                var cr:Number = getStyle("cornerRadius");
                
                if (cornerRadius != cr)
                {
                    cornerRadius = cr;
                }
                
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
            
            private var cornerRadius:Number = 2;
                                 
			protected function sparkbuttonskin1_creationCompleteHandler(event:FlexEvent):void
			{
//					labelDisplay.setStyle("fontFamily",'hyxl');
			}
			
		]]>        
    </fx:Script>
        
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" />
        <s:State name="down" />
        <s:State name="disabled" />
    </s:states>
	
	<s:BitmapImage includeIn="disabled,up" smooth="true" left="0" top="0" bottom="0" right="0"
				   source="@Embed('../../../../../../../assets/images/formation/switch_up.png')"/>
	<s:BitmapImage includeIn="over" smooth="true" left="0" right="0" top="0" bottom="0"
				   source="@Embed('../../../../../../../assets/images/formation/switch_over.png')"/>
	<s:BitmapImage includeIn="down" smooth="true" right="0" top="0" bottom="0" left="0"
				   source="@Embed('../../../../../../../assets/images/formation/switch_down.png')"/>
    
    <!-- layer 8: text -->
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay  -->
    <s:Label id="labelDisplay" fontSize="18" color="#dbdbc8" fontFamily="hyxl"
             textAlign="center" filters="{new spark.filters.GlowFilter(0x10180f,0.45,1,1,0,1,false,false)}"
             maxDisplayedLines="1"
             horizontalCenter="0" verticalCenter="1" verticalAlign="middle"
             left="10" right="10" top="2" bottom="2">
    </s:Label>
    
</s:SparkButtonSkin>
