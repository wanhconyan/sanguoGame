package com.core.component
{
	import flash.display.Sprite;
	import flash.geom.Point;
	
	public class MulitPolygon extends Sprite
	{
		
		private var polygonLenU:int = 0 ;
		
		private var polygonLenV:int = 0 ;
		
		private var sideLength:int = 0 ;
		/**
		 * 多边形数组 
		 */		
		private var _polygon:Vector.<Vector.<PolyState>> = null;
		
		
		
		public function MulitPolygon(polygonLenU:int = 100 ,polygonLenV:int = 100, sideLenght:int=20)
		{
			super();
			this.sideLength = sideLenght ;
			this.polygonLenU = polygonLenU ;
			this.polygonLenV = polygonLenV;
			createPloygon();
		}
	   /**
	    * 创建整形地面  
	    */		
	   private function createPloygon():void
	   {
		   _polygon = new Vector.<Vector.<PolyState>>();
		   var poly:PolyState = null;
		   for(var i:int = 0 ; i < polygonLenU  ; i ++)
		   {
				_polygon[i] = new Vector.<PolyState>();
				for(var j:int = 0 ; j < polygonLenV ; j ++)
				{
					poly = new PolyState(sideLength);
					_polygon[i][j] = poly ;
					poly.xNode = i ;
					poly.yNode = j ;
					this.addChild(poly);
					poly.x = i * (poly.sideLength * Math.cos(Math.PI/6) * Math.cos(Math.PI/6)) ;
					poly.y = j * poly.sideLength * Math.cos(Math.PI/6) + i%2 * poly.sideLength * Math.sin(Math.PI/3)/2;
					poly.transform.matrix = Polygon. scaleMatrix();
				}
		   }
	   }
	   
	   /**
	    * 获取当前索引的六边形位置 
	    * @param $u
	    * @param $v 
	    * @param $sideLength 六边形宽度
	    * @return 
	    */
	   public static function getPolyPosition($u:int,$v:int,$sideLength:int):Point
	   {
	   	var point:Point = new Point($u* ($sideLength* Math.cos(Math.PI/6) * Math.cos(Math.PI/6)),$v* $sideLength * Math.cos(Math.PI/6) + $u%2 * $sideLength * Math.sin(Math.PI/3)/2);
	   
	   	return point ;
	   }
	}
}